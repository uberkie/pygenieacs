name: Build & Publish pygenie 🐍📦

on:
  push:
    branches:
      - main  # build and TestPyPI on main

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install build dependencies
        run: pip install build toml

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(python -c "import toml; pyproject=toml.load('pyproject.toml'); print(pyproject['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build wheel and sdist
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

  publish-to-testpypi:
    name: Publish 📦 to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: testpypi
      url: https://test.pypi.org/project/pygenie/
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  tag-and-publish-to-pypi:
    name: Tag & Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'  # only run on main
    environment:
      name: pypi
      url: https://pypi.org/project/pygenie/
    permissions:
      id-token: write
      contents: write  # required for creating git tags
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(python -c "import toml; pyproject=toml.load('pyproject.toml'); print(pyproject['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
